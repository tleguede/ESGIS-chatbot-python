AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS CloudFormation Template for the Application

###############################################################################
Parameters:
###############################################################################
  EnvironmentName:
    Description: Environment name for the application dev/staging/production
    Type: String
    AllowedValues:
      - tleguede
      - dev
      - preprod
      - prod
      - tleguede-dev
      - tleguede-preprod
      - tleguede-prod
  
  TelegramBotToken:
    Description: Token for the Telegram bot
    Type: String
    NoEcho: true
  
  MistralApiKey:
    Description: API key for Mistral AI
    Type: String
    NoEcho: true

###############################################################################
Resources:
###############################################################################
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "chatbot-dbtable-v2-${EnvironmentName}"
      # Ancien nom: chatbot-dbtable-${EnvironmentName}
      # Supprimer cette ligne de commentaire après la migration
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Définir d'abord la fonction Lambda
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "chatbot-lambda-${EnvironmentName}"
      CodeUri: ../
      Handler: src/lambda.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          MISTRAL_API_KEY: !Ref MistralApiKey
          DATABASE_TYPE: "dynamodb"
          DYNAMO_TABLE: !Ref DynamoDBTable
          ENV: !Ref EnvironmentName
          # Utiliser une URL prédéfinie qui sera mise à jour après le déploiement
          API_URL: !Sub 'https://${AWS::StackName}-api.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:BatchWriteItem'
              Resource: !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
                - 'dynamodb:Query'
              Resource: !Sub '${DynamoDBTable.Arn}/index/*'

  # Créer l'API Gateway séparément
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "chatbot-apigateway-${EnvironmentName}"
      Description: API Gateway pour le chatbot
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Créer une ressource proxy pour gérer tous les chemins
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "{proxy+}"

  # Méthode ANY pour la ressource proxy
  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"

  # Méthode ANY pour la racine
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"

  # Déploiement de l'API
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
      - RootMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref EnvironmentName

  # Permission pour que l'API Gateway puisse appeler la fonction Lambda
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Function.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*"

Outputs:
  DynamoDBTableName:
    Value: !Ref DynamoDBTable
  ApiUrl:
    Description: URL of your API
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/"
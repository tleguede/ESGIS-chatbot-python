AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS CloudFormation Template for the Application

###############################################################################
Parameters:
###############################################################################
  EnvironmentName:
    Description: Environment name for the application dev/staging/production
    Type: String
    AllowedValues:
      - tleguede
      - dev
      - preprod
      - prod
      - tleguede-dev
      - tleguede-preprod
      - tleguede-prod
  
  TelegramBotToken:
    Description: Token for the Telegram bot
    Type: String
    NoEcho: true
  
  MistralApiKey:
    Description: API key for Mistral AI
    Type: String
    NoEcho: true

###############################################################################
Resources:
###############################################################################
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "chatbot-dbtable-v2-${EnvironmentName}"
      # Ancien nom: chatbot-dbtable-${EnvironmentName}
      # Supprimer cette ligne de commentaire apr√®s la migration
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "chatbot-apigateway-${EnvironmentName}"
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "GET"
          - "POST"
          - "OPTIONS"
        AllowHeaders:
          - "Content-Type"
          - "X-Amz-Date"
          - "Authorization"
          - "X-Api-Key"
          - "X-Amz-Security-Token"
          - "X-Amz-User-Agent"

  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "chatbot-lambda-${EnvironmentName}"
      CodeUri: ../
      Handler: src/app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          ENV_NAME: !Ref EnvironmentName
          DYNAMO_TABLE: !Ref DynamoDBTable
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          MISTRAL_API_KEY: !Ref MistralApiKey
          TELEGRAM_WEBHOOK_PATH: "/api/chat/update"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:BatchWriteItem
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
                - dynamodb:ConditionCheckItem
                - apigateway:POST
                - apigateway:GET
              Resource:
                - !GetAtt DynamoDBTable.Arn
                - !Sub "${DynamoDBTable.Arn}/index/*"
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /{proxy+}
            Method: ANY



Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/"
  WebhookUrl:
    Description: "Telegram Webhook URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/chat/update"
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref DynamoDBTable
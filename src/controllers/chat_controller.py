"""
Contr√¥leur pour g√©rer les requ√™tes de chat via l'API.
"""
import logging
from fastapi import APIRouter, HTTPException, Depends, Request
from pydantic import BaseModel
from typing import Dict, Any, List, Optional

from ..services.telegram_service import TelegramService

# Configuration du logger
logger = logging.getLogger(__name__)


class MessageRequest(BaseModel):
    """Mod√®le de requ√™te pour envoyer un message."""
    chat_id: int
    username: str
    message: str


class MessageResponse(BaseModel):
    """Mod√®le de r√©ponse pour un message."""
    response: str


class ChatController:
    """Contr√¥leur pour g√©rer les requ√™tes de chat via l'API."""
    
    def __init__(self, telegram_service: TelegramService):
        """
        Initialise le contr√¥leur de chat.
        
        Args:
            telegram_service: Service Telegram √† utiliser
        """
        self.telegram_service = telegram_service
    
    async def send_message(self, request: MessageRequest) -> MessageResponse:
        """
        Envoie un message au bot et retourne la r√©ponse.
        
        Args:
            request: Requ√™te contenant les informations du message
            
        Returns:
            R√©ponse du bot
        """
        try:
            response = await self.telegram_service.process_message(
                request.chat_id,
                request.username,
                request.message
            )
            
            return MessageResponse(response=response)
        
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Erreur lors du traitement du message: {str(e)}")
    
    async def get_health(self) -> Dict[str, str]:
        """
        V√©rifie l'√©tat de sant√© du service.
        
        Returns:
            √âtat de sant√© du service
        """
        return {"status": "ok"}
        
    async def handle_webhook_update(self, update: Dict[str, Any]) -> Dict[str, str]:
        """
        Traite une mise √† jour du webhook Telegram.
        
        Args:
            update: Donn√©es de mise √† jour de Telegram
            
        Returns:
            R√©ponse de confirmation
        """
        try:
            # V√©rifier si c'est un message
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                username = message['from'].get('username', 'inconnu')
                text = message.get('text', '')
                
                if text.startswith('/'):
                    # G√©rer les commandes - traitement direct sans passer par les handlers
                    if text == '/start':
                        welcome_message = 'Bonjour ! Je suis votre assistant IA aliment√© par Mistral AI. Comment puis-je vous aider aujourd\'hui?\n\n' \
                                      'Utilisez /chat pour d√©marrer une conversation avec moi\n' \
                                      'Utilisez /reset pour effacer notre historique de conversation\n' \
                                      'Utilisez /help pour voir toutes les commandes disponibles'
                        
                        # Envoyer directement un message via l'API Telegram
                        await self.telegram_service.send_message(chat_id, welcome_message)
                    
                    elif text == '/chat':
                        # Activer le mode chat pour cet utilisateur
                        self.telegram_service.chat_mode[chat_id] = True
                        await self.telegram_service.send_message(chat_id, 'Mode chat activ√© ! Vous pouvez maintenant me parler directement. Que voulez-vous discuter ?')
                    
                    elif text == '/reset':
                        # R√©initialiser la conversation
                        await self.telegram_service.db_adapter.reset_conversation(chat_id)
                        await self.telegram_service.send_message(chat_id, 'Votre historique de conversation a √©t√© r√©initialis√©.')
                    
                    elif text == '/help':
                        help_message = 'Commandes disponibles:\n\n' \
                                   '/start - D√©marrer la conversation et afficher le menu\n' \
                                   '/chat - Commencer √† discuter avec l\'IA\n' \
                                   '/reset - R√©initialiser votre historique de conversation\n' \
                                   '/help - Afficher ce message d\'aide'
                        await self.telegram_service.send_message(chat_id, help_message)
                else:
                    # Traiter comme un message texte normal
                    response = await self.telegram_service.process_message(chat_id, username, text)
                    # Envoyer la r√©ponse via l'API Telegram
                    await self.telegram_service.send_message(chat_id, response)
            
            # G√©rer les callbacks des boutons inline
            elif 'callback_query' in update:
                callback_query = update['callback_query']
                message = callback_query['message']
                chat_id = message['chat']['id']
                username = callback_query['from'].get('username', 'inconnu')
                data = callback_query.get('data', '')
                
                # Traiter le callback directement
                if data == "feedback_positive":
                    await self.telegram_service.send_message(chat_id, "Merci pour votre feedback positif ! üòä")
                elif data == "feedback_negative":
                    await self.telegram_service.send_message(chat_id, "Je suis d√©sol√© que ma r√©ponse n'ait pas √©t√© utile. Comment puis-je m'am√©liorer ?")
            
            return {"status": "ok"}
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la mise √† jour: {str(e)}")
            logger.error(f"D√©tails de l'erreur: {str(e.__traceback__)}")
            raise HTTPException(
                status_code=500,
                detail=f"Erreur lors du traitement de la mise √† jour: {str(e)}"
            )
